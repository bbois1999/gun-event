//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

/// User model
model User {
  id                String         @id() @default(cuid())
  email             String         @unique()
  username          String         @unique()
  phoneNumber       String         @unique()
  verifiedEmail     Boolean        @default(false)
  verifiedPhone     Boolean        @default(false)
  preferredMfa      String         @default("email")
  otpSecret         String?
  otpExpiry         DateTime?
  posts             Post[]
  events            Event[]
  followedBy        Follow[]       @relation("follower")
  following         Follow[]       @relation("following")
  likes             Like[]
  notifications     Notification[] @relation("userNotifications")
  notificationsSent Notification[] @relation("notificationSender")
  accounts          Account[]
  sessions          Session[]
  imagePosts        ImagePost[]
}

/// Like model for post likes
model Like {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  @@unique([userId, postId])
}

/// Notification model
model Notification {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  type      String
  message   String
  postId    String?
  user      User     @relation("userNotifications", fields: [userId], references: [id])
  userId    String
  sender    User?    @relation("notificationSender", fields: [senderId], references: [id])
  senderId  String?
}

/// Follow relationship model
model Follow {
  id         String   @id() @default(cuid())
  createdAt  DateTime @default(now())
  followedId String
  followed   User     @relation("follower", fields: [followedId], references: [id])
  followerId String
  follower   User     @relation("following", fields: [followerId], references: [id])

  @@unique([followerId, followedId])
}

/// Post model
model Post {
  id        String      @id() @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt()
  title     String
  content   String
  published Boolean     @default(false)
  imageUrl  String?
  imageKey  String?
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  event     Event?      @relation(fields: [eventId], references: [id])
  eventId   String?
  likes     Like[]
  images    PostImage[]
}

/// PostImage model for storing multiple images per post
model PostImage {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  url       String
  key       String
  position  Int      @default(0)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  @@index([postId])
}

/// Gun Show Event model
model Event {
  id          String      @id() @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt()
  title       String
  description String
  date        DateTime
  location    String
  organizer   String
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  posts       Post[]
  imagePosts  ImagePost[]
}

/// NextAuth Session model
model Session {
  id           String   @id() @default(cuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// NextAuth Account model for database session support
model Account {
  id                String  @id() @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// Image Post model (legacy)
model ImagePost {
  id        String   @id() @default(cuid())
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  image     String
  authorId  String
  eventId   String?
  author    User     @relation(fields: [authorId], references: [id])
  event     Event?   @relation(fields: [eventId], references: [id])
}
